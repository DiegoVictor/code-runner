{
	"info": {
		"_postman_id": "d3e4fc53-cca6-40c3-bcfd-b44f89ae5789",
		"name": "Code Runner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4346128"
	},
	"item": [
		{
			"name": "Solution",
			"item": [
				{
					"name": "JS",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"language\": \"js\",\r\n    \"code\": \"async function run({ input }) {\\n  return input * input;\\n}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/challenges/{{challengeId}}/solution",
							"host": [
								"{{host}}"
							],
							"path": [
								"challenges",
								"{{challengeId}}",
								"solution"
							]
						}
					},
					"response": []
				},
				{
					"name": "TS",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"language\": \"ts\",\r\n    \"code\": \"async function run({ input }: Record<string, number>) {\\n  const square: number = input**2;\\n  return square;\\n}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/challenges/{{challengeId}}/solution",
							"host": [
								"{{host}}"
							],
							"path": [
								"challenges",
								"{{challengeId}}",
								"solution"
							]
						}
					},
					"response": []
				},
				{
					"name": "Python",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"language\": \"python\",\r\n    \"code\": \"def run(params):\\n  return pow(params['input'], 2)\\n\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/challenges/{{challengeId}}/solution",
							"host": [
								"{{host}}"
							],
							"path": [
								"challenges",
								"{{challengeId}}",
								"solution"
							]
						}
					},
					"response": []
				},
				{
					"name": "Golang",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"language\": \"go\",\r\n    \"code\": \"func run(params map[string]interface{}) (interface{}, error) {\\n  num := float64(params[\\\"input\\\"].(float64))\\n  return num * num, nil\\n}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/challenges/{{challengeId}}/solution",
							"host": [
								"{{host}}"
							],
							"path": [
								"challenges",
								"{{challengeId}}",
								"solution"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"if (response.data?.length > 0) {\r",
							"    const [challenge] = response.data;\r",
							"    pm.collectionVariables.set('challengeId', challenge.id)\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/challenges?limit=10",
					"host": [
						"{{host}}"
					],
					"path": [
						"challenges"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "cursorId",
							"value": "11bafe48-66c8-4726-8d73-460c981c198e",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/challenges/{{challengeId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"challenges",
						"{{challengeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Square It Up!\",\r\n    \"description\": \"Create a function that takes a single integer and returns its square. This challenge will test your ability to perform basic math operations and return statements.\",\r\n    \"instructions\": \"1. Input: You'll receive a single integer as input.\\n2. Output: Return the square of the input integer (the integer multiplied by itself).\\n 3. Example: If the input is 5, the output should be 25.\\n\\nGive it a try and square it up!\",\r\n    \"languages\": [\r\n        \"js\",\r\n        \"ts\",\r\n        \"python\",\r\n        \"go\"\r\n    ],\r\n    \"inputs\": [\r\n        {\r\n            \"id\": \"clwm7ealm000008ky9raxasvv\",\r\n            \"value\": {\r\n                \"input\": 5\r\n            },\r\n            \"expected\": 25\r\n        },\r\n        {\r\n            \"id\": \"clwm7eoyf000108ky2gmpa65o\",\r\n            \"value\": {\r\n                \"input\": 9\r\n            },\r\n            \"expected\": 81\r\n        },\r\n        {\r\n            \"id\": \"clwm7ewh1000208ky1hli9yrb\",\r\n            \"value\": {\r\n                \"input\": 11\r\n            },\r\n            \"expected\": 121\r\n        },\r\n        {\r\n            \"id\": \"clwm7f482000308kyg437fhmq\",\r\n            \"value\": {\r\n                \"input\": 33\r\n            },\r\n            \"expected\": 1089\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/challenges",
					"host": [
						"{{host}}"
					],
					"path": [
						"challenges"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "challengeId",
			"value": "e299941c-9d29-4521-b08a-407f542dd1c0"
		},
		{
			"key": "host",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}