Resources:
  CodeRunnerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: coderunner
      EmptyOnDelete: true
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:DeleteRepositoryPolicy'
              - 'ecr:DescribeImages'
              - 'ecr:DescribeRepositories'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:ListImages'
              - 'ecr:SetRepositoryPolicy'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'

  CodeRunnerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'coderunner-${AWS::AccountId}'

  ClusterCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"username": "app_user"}'
        GenerateStringKey: password
        PasswordLength: 30
        ExcludeCharacters: '"@/\:'

  DbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: coderunner
      DBClusterIdentifier: coderunner-dbcluster
      Engine: aurora-postgresql
      EngineMode: provisioned
      MasterUsername: !Sub '{{resolve:secretsmanager:${ClusterCredentials}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${ClusterCredentials}::password}}'
      Port: 5432
      # PubliclyAccessible: true
      VpcSecurityGroupIds:
        - !GetAtt RdsSecurityGroup.GroupId

  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DbCluster
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: rds-lambda-1
      GroupDescription: Allow traffic from Lambda to RDS
      VpcId: vpc-0dcf985f88fdc7e18
      # SecurityGroupIngress:
      #   - IpProtocol: tcp
      #     FromPort: 5432
      #     ToPort: 5432
      #     CidrIp: Your IP Address
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  RdsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt RdsSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: lambda-rds-1
      GroupDescription: Allow traffic from Lambda to RDS
      VpcId: vpc-0dcf985f88fdc7e18
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          DestinationSecurityGroupId: !GetAtt RdsSecurityGroup.GroupId

  LambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt LambdaSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt SecretsManagerEndpointSecurityGroup.GroupId

Outputs:
  DatabaseUrl:
    Value: !Join [
      '',
      [
        'postgresql://',
        !Sub '{{resolve:secretsmanager:${ClusterCredentials}::username}}',
        ':',
        !Sub '{{resolve:secretsmanager:${ClusterCredentials}::password}}',
        '@',
        !GetAtt DbCluster.Endpoint.Address,
        ':',
        !GetAtt DbCluster.Endpoint.Port,
        '/coderunner?schema=public'
      ]
    ]
    Export:
      Name: coderunner-DatabaseUrl
  CodeRunnerBucketName:
    Value: !Ref CodeRunnerBucket
    Export:
      Name: coderunner-CodeRunnerBucketName
  LambdaSecurityGroupId:
    Value: !GetAtt LambdaSecurityGroup.GroupId
    Export:
      Name: coderunner-LambdaSecurityGroupId
  SubnetsId:
    Value: !Join [
      ',',
      [
        'subnet-04701fef257ae0c0a',
        'subnet-0cb1872219b2a9c19',
        'subnet-0d8b2b5b2e86eeaae',
        'subnet-067caf19899ca509d',
        'subnet-0664cdd67109a01ad',
        'subnet-06d34fb45ec9b8665'
      ]
    ]
    Export:
      Name: coderunner-SubnetsId
